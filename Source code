import pygame
import random
import time
import pyodbc


# Initialize Pygame
pygame.init()

font = pygame.font.Font(None, 36)  # You can change the size (36) as needed


# Screen dimensions
SCREEN_WIDTH = 900
SCREEN_HEIGHT = 600

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

# Game settings
FPS = 60
PLAYER_SPEED = 5
ENEMY_SPEED = 2

# Load assets
BACKGROUND_IMAGE = pygame.image.load("assets/background3.jpg")
PLAYER_IMAGE = pygame.image.load("assets/player.png")
ENEMY_IMAGE = pygame.image.load("assets/enemy.png")
BULLET_IMAGE = pygame.image.load("assets/bullet1.png")
EXPLOSION_IMAGE = pygame.image.load("assets/explosion.png")
MUSIC = pygame.mixer.Sound("assets/music1.wav")
BULLET_SOUND = pygame.mixer.Sound("assets/bullet1.wav")
EXPLOSION_SOUND = pygame.mixer.Sound("assets/explosion.wav")

# Database connection using Windows Authentication
def connect_to_db():
    try:
        conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};'
                              'SERVER=localhost;'
                              'DATABASE=GameDB;'
                              'Trusted_Connection=yes;')
        return conn
    except Exception as e:
        print(f"Error connecting to database: {e}")
        return None


# Save player data (username, password, high_score) to the database
def save_player_data(username, password, high_score):
    conn = connect_to_db()
    cursor = conn.cursor()

    # Check if the username already exists
    cursor.execute("SELECT * FROM PlayerData WHERE username = ?", username)
    existing_player = cursor.fetchone()
    
    if existing_player:
        cursor.close()
        conn.close()
        return False  # Username already exists
    else:
        # Insert new player data
        cursor.execute("""
            INSERT INTO PlayerData (username, password, high_score)
            VALUES (?, ?, ?)
        """, username, password, high_score)
    
    conn.commit()
    cursor.close()
    conn.close()
    return True  # Successfully saved new player data


# Retrieve player data for login (verify username and password)
def authenticate_user(username, password):
    conn = connect_to_db()
    cursor = conn.cursor()

    cursor.execute("SELECT high_score FROM PlayerData WHERE username = ? AND password = ?", username, password)
    result = cursor.fetchone()
    
    cursor.close()
    conn.close()
    
    if result:
        global high_score
        high_score = result[0]  # Set the high score from the database
        return True  # Successful login
    else:
        return False  # Failed login




# Update high score in the database
def update_high_score(username, high_score):
    conn = connect_to_db()
    cursor = conn.cursor()

    # Check the current high score in the database for the given username
    cursor.execute("SELECT high_score FROM PlayerData WHERE username = ?", username)
    result = cursor.fetchone()
    
    if result:
        current_high_score = result[0]
        if score > current_high_score:
            # Update the high score if the current one is higher
            cursor.execute("UPDATE PlayerData SET high_score = ? WHERE username = ?", high_score, username)
            conn.commit()
    
    cursor.close()
    conn.close()

    
# Function to display a message on the screen
def show_message(message, color, y_offset=0):
    text = font.render(message, True, color)
    screen.blit(text, (SCREEN_WIDTH // 2 - text.get_width() // 2, SCREEN_HEIGHT // 2 + y_offset))

# Create the Pygame window
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Login and Signup")

# Function to create a button on the screen
def create_button(message, x, y, width, height, color, text_color):
    pygame.draw.rect(screen, color, pygame.Rect(x, y, width, height))
    text = font.render(message, True, text_color)
    screen.blit(text, (x + width // 2 - text.get_width() // 2, y + height // 2 - text.get_height() // 2))

# Function to check if a button is clicked
def is_button_clicked(x, y, width, height, mouse_pos):
    return x < mouse_pos[0] < x + width and y < mouse_pos[1] < y + height

# Game variables
score = 0

done = False
clock = pygame.time.Clock()
game_active = False
game_over = False
replay_cost = 100  # Initial replay cost

# Player class
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = PLAYER_IMAGE
        self.rect = self.image.get_rect()
        self.rect.centerx = SCREEN_WIDTH // 2
        self.rect.bottom = SCREEN_HEIGHT - 10
        self.speed_x = 0

    def update(self):
        self.speed_x = 0
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            self.speed_x = -PLAYER_SPEED
        if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            self.speed_x = PLAYER_SPEED
        self.rect.x += self.speed_x
        if self.rect.right > SCREEN_WIDTH:
            self.rect.right = SCREEN_WIDTH
        if self.rect.left < 0:
            self.rect.left = 0

    def shoot(self):
        bullet = Bullet(self.rect.centerx, self.rect.top)
        all_sprites.add(bullet)
        bullets.add(bullet)
        BULLET_SOUND.play()

# Enemy class
class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = ENEMY_IMAGE
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH - self.rect.width)
        self.rect.y = random.randint(-100, -40)
        self.speed_y = ENEMY_SPEED + random.uniform(-1, 1)

    def update(self):
        self.rect.y += self.speed_y
        if self.rect.top > SCREEN_HEIGHT:
            self.rect.y = random.randint(-100, -40)
            self.rect.x = random.randint(0, SCREEN_WIDTH - self.rect.width)
            global score
            score -= 1

# Bullet class
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = BULLET_IMAGE
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speed_y = -10

    def update(self):
        self.rect.y += self.speed_y
        if self.rect.bottom < 0:
            self.kill()

# Explosion class
class Explosion(pygame.sprite.Sprite):
    def __init__(self, center):
        super().__init__()
        self.image = EXPLOSION_IMAGE
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.last_update = pygame.time.get_ticks()
        self.frame_rate = 50

    def update(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > self.frame_rate:
            self.kill()

# Button class
class Button:
    def __init__(self, text, pos, font, bg_color=BLUE, text_color=WHITE):
        self.x, self.y = pos
        self.font = pygame.font.Font(None, font)
        self.bg_color = bg_color
        self.text_color = text_color
        self.change_text(text)

    def change_text(self, text):
        self.text = self.font.render(text, True, self.text_color)
        self.size = self.text.get_size()
        self.surface = pygame.Surface((self.size[0] + 20, self.size[1] + 20))
        self.surface.fill(self.bg_color)
        self.surface.blit(self.text, (10, 10))
        self.rect = self.surface.get_rect(center=(self.x, self.y))

    def show(self, screen):
        screen.blit(self.surface, self.rect.topleft)

    def click(self, event):
        x, y = pygame.mouse.get_pos()
        if event.type == pygame.MOUSEBUTTONDOWN:
            if pygame.mouse.get_pressed()[0]:
                if self.rect.collidepoint(x, y):
                    return True
        return False


# Sprite groups
all_sprites = pygame.sprite.Group()
enemies = pygame.sprite.Group()
bullets = pygame.sprite.Group()

def start_game():
    global all_sprites, enemies, bullets, player, score, game_over, game_active, replay_cost, username
    all_sprites = pygame.sprite.Group()
    enemies = pygame.sprite.Group()
    bullets = pygame.sprite.Group()
    player = Player()
    all_sprites.add(player)
    for i in range(8):
        enemy = Enemy()
        all_sprites.add(enemy)
        enemies.add(enemy)
    score = 0
    
    replay_cost = 100
    game_over = False
    game_active = True

# Play background music
MUSIC.play(-1)

# Create the "Play" button and welcome message
play_button = Button("Play", (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2), font=74)
# Create play button and display it after successful login
logout_button = Button("Logout", (50, 50), font=36)  # Logout button at the top left
restart_button = Button("Restart", (SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2), font=50)
quit_button = Button("Quit", (3 * SCREEN_WIDTH // 4, SCREEN_HEIGHT // 2), font=50)
welcome_text = "Welcome to War Space!"

# Add button areas
left_button = pygame.Rect(50, SCREEN_HEIGHT - 100, 100, 50)
right_button = pygame.Rect(200, SCREEN_HEIGHT - 100, 100, 50)
fire_button = pygame.Rect(SCREEN_WIDTH - 150, SCREEN_HEIGHT - 100, 100, 50)

# Draw buttons function (updated for transparent buttons)
def draw_buttons():
    font = pygame.font.Font(None, 36)
    left_text = font.render("Left", True, WHITE)
    right_text = font.render("Right", True, WHITE)
    fire_text = font.render("Fire", True, WHITE)

    # Render text directly onto the screen at the button locations
    screen.blit(left_text, (left_button.x + 25, left_button.y + 10))
    screen.blit(right_text, (right_button.x + 20, right_button.y + 10))
    screen.blit(fire_text, (fire_button.x + 20, fire_button.y + 10))


# Speed increment for button-based movement
BUTTON_MOVEMENT_SPEED = 35  # Increased speed for button clicks

# Game loop (modified)
# Game loop (modified)
def game_loop():
    global username, game_active, game_over, high_score

    logged_in = False
    signup = False
    username = ""
    password = ""
    high_score = 0
    done = False
    clock = pygame.time.Clock()

    # Variables to track focus (use tab to switch focus)
    focus_field = "username"  # Start with the username field

    # Message tracking variables
    message = ""  # Variable to store the current message to display
    message_color = WHITE  # Default color of message
    last_message_time = 0  # Time when the message was shown
    message_duration = 3000  # Duration for the message to be displayed (in milliseconds)

    while not done:
        screen.fill(BLACK)
        current_time = pygame.time.get_ticks()  # Get the current time in milliseconds

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_BACKSPACE:
                    if focus_field == "username" and username:
                        username = username[:-1]
                    elif focus_field == "password" and password:
                        password = password[:-1]
                elif event.key == pygame.K_RETURN:  # Submit on Enter key
                    if signup:
                        # Signup process
                        if username and password:
                            # Attempt to save player data
                            if save_player_data(username, password, high_score):
                                message = "Account Created! Switching to login..."
                                message_color = GREEN
                                last_message_time = current_time  # Track when the message was shown
                                pygame.display.flip()
                                time.sleep(1)  # Wait for 1 second before switching to login
                                signup = False  # Switch to the login screen after successful signup
                                username = ""  # Clear fields for login
                                password = ""  # Clear fields for login
                            else:
                                message = "Username already exists! Please choose a different one."
                                message_color = RED
                                last_message_time = current_time
                                time.sleep(1)
                        else:
                            message = "Please fill in both fields"
                            message_color = RED
                            last_message_time = current_time
                            time.sleep(1)
                    else:
                        # Login process
                        if username and password:
                            if authenticate_user(username, password):
                                logged_in = True
                                message = "Login Successful!"
                                message_color = GREEN
                                last_message_time = current_time
                                time.sleep(2)
                                done = True  # Break the loop and move to the game screen
                            else:
                                message = "Invalid credentials. Please try again."
                                message_color = RED
                                last_message_time = current_time
                                time.sleep(1)
                        else:
                            message = "Please enter both username and password"
                            message_color = RED
                            last_message_time = current_time
                            time.sleep(1)

                elif event.key == pygame.K_TAB:  # Switch between username and password using Tab
                    if focus_field == "username":
                        focus_field = "password"
                    else:
                        focus_field = "username"
                else:
                    # Handle regular typing
                    if focus_field == "username" and len(username) < 20 and event.unicode.isalnum():
                        username += event.unicode
                    elif focus_field == "password" and len(password) < 20:
                        password += event.unicode

            mouse_pos = pygame.mouse.get_pos()

            # Display the login/signup screen
            if not signup:
                show_message("Login", WHITE, -100)
                show_message(f"Username: {username}", WHITE, -50)
                show_message(f"Password: {'*' * len(password)}", WHITE, 0)
                if not username and not password:
                    show_message("Enter username and password", WHITE, 50)

                # Create a "Signup" button on the login screen
                create_button("Signup", 350, 400, 200, 50, BLUE, WHITE)
                if is_button_clicked(350, 400, 200, 50, mouse_pos) and event.type == pygame.MOUSEBUTTONDOWN:
                    signup = True  # Switch to the signup screen
                    username = ""  # Clear fields for new data
                    password = ""

                # Show error message for login only if it was set recently
                if current_time - last_message_time <= message_duration and message != "":
                    show_message(message, message_color, 170)

            else:
                show_message("Signup", WHITE, -100)
                show_message(f"Username: {username}", WHITE, -50)
                show_message(f"Password: {'*' * len(password)}", WHITE, 0)
                show_message("Press Enter to Submit", WHITE, 50)

                # Create a "Login" button on the signup screen
                create_button("Login", 350, 400, 200, 50, BLUE, WHITE)
                if is_button_clicked(350, 400, 200, 50, mouse_pos) and event.type == pygame.MOUSEBUTTONDOWN:
                    signup = False  # Switch to the login screen
                    username = ""  # Clear fields for new data
                    password = ""

                # Show error message for signup only if it was set recently
                if current_time - last_message_time <= message_duration and message != "":
                    show_message(message, message_color, 170)

            pygame.display.flip()
            clock.tick(FPS)

    # Once the user is logged in, move to the play screen
    play_screen()

# Add logout button in the main menu (top-left corner)
logout_button = Button("Logout", (50, 50), font=36)

# Function to handle logout action
def logout():
    global username, game_active, game_over
    # Reset game state and user session
    username = ""
    game_active = False
    game_over = False
    # Switch to login screen
    if username:
       game_loop()

def play_screen():
    global username, high_score  # Make sure to keep the database high score only for display
    
    # Fetch the high score from the database when the game ends and the player returns to the main menu
    if username:  # Check if username is valid (after login)
        # Reload the high score from the database
        conn = connect_to_db()
        cursor = conn.cursor()
        cursor.execute("SELECT high_score FROM PlayerData WHERE username = ?", username)
        result = cursor.fetchone()
        if result:
            high_score = result[0]  # Set the high score from the database
        cursor.close()
        conn.close()

    done = False
    while not done:
        screen.fill(BLACK)
        font = pygame.font.Font(None, 74)

        # Display player name at the top (just below the top of the screen)
        if username:  # Check if username is not empty
            player_name_text = font.render(f"Hi, {username}", True, WHITE)
            screen.blit(player_name_text, (SCREEN_WIDTH // 2 - player_name_text.get_width() // 2, 20))  # Position at top

        # Display welcome message
        text = font.render(welcome_text, True, WHITE)
        screen.blit(text, (SCREEN_WIDTH // 2 - text.get_width() // 2, SCREEN_HEIGHT // 2 - text.get_height() - 100))

        high_score_text = font.render(f"High Score: {high_score}", True, WHITE)
        screen.blit(high_score_text, (SCREEN_WIDTH // 2 - high_score_text.get_width() // 2, SCREEN_HEIGHT // 2 + 100))

        play_button.show(screen)
        logout_button.show(screen)  # Display the logout button

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if play_button.click(event):
                    start_game()  # Start the game when Play is clicked
                    done = True  # Exit play screen and start game loop
                elif logout_button.click(event):  # Handle logout click
                    game_active = False
                    game_over = False
                    logged_in = False  # Logout the current player
                    username = ""
                    password = ""
                    game_loop()  # Call the game loop to show the login screen again

        pygame.display.flip()

# Call the game loop to start login/signup
game_loop()

 
while not done:
    screen.fill(BLACK)
    #screen.blit(BACKGROUND_IMAGE, (0, 0))
    global high_score  # Make sure to keep the database high score only for display
    
    # Fetch the high score from the database when the game ends and the player returns to the main menu
    if username:  # Check if username is valid (after login)
        # Reload the high score from the database
        conn = connect_to_db()
        cursor = conn.cursor()
        cursor.execute("SELECT high_score FROM PlayerData WHERE username = ?", username)
        result = cursor.fetchone()
        if result:
            high_score = result[0]  # Set the high score from the database
        cursor.close()
        conn.close()
        

    if not game_active and not game_over:
        font = pygame.font.Font(None, 74)

        if username:  # Check if username is not empty
            player_name_text = font.render(f"Hi, {username}", True, WHITE)
            screen.blit(player_name_text, (SCREEN_WIDTH // 2 - player_name_text.get_width() // 2, 20))  # Position at top

        # Display welcome message 
        text = font.render(welcome_text, True, WHITE)
        screen.blit(text, (SCREEN_WIDTH // 2 - text.get_width() // 2, SCREEN_HEIGHT // 2 - text.get_height() - 100))

        # Show the high score below the "Play" button
        high_score_text = font.render(f"High Score: {high_score}", True, WHITE)
        screen.blit(high_score_text, (SCREEN_WIDTH // 2 - high_score_text.get_width() // 2, SCREEN_HEIGHT // 2 + 100))
        play_button.show(screen)
        logout_button = Button("Logout", (50, 50), font=36)  # Logout button at the top left
        logout_button.show(screen)  # Display the logout button


        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if play_button.click(event):
                    start_game()
                    
    elif game_over:
        if score >= replay_cost:
            restart_button.show(screen)
            quit_button.show(screen)
            font = pygame.font.Font(None, 36)
            text = font.render(f"Use {replay_cost} score points to replay?", True, WHITE)
            screen.blit(text, (SCREEN_WIDTH // 2 - text.get_width() // 2, SCREEN_HEIGHT // 2 - 100))
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    done = True
                elif event.type == pygame.MOUSEBUTTONDOWN:
                    if restart_button.click(event):
                        score -= replay_cost
                        replay_cost += 100
                        start_game()
                    elif quit_button.click(event):
                        done = True
        else:
            font = pygame.font.Font(None, 36)
            text = font.render("Not enough score for replay. Exiting in 5 seconds.", True, RED)
            screen.blit(text, (SCREEN_WIDTH // 2 - text.get_width() // 2, SCREEN_HEIGHT // 2 - 100))
            pygame.display.flip()
            time.sleep(5)
            play_screen()
            # Transition back to home screen
            game_active = False
            game_over = False
    else:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    player.shoot()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if left_button.collidepoint(event.pos):
                    player.rect.x -= BUTTON_MOVEMENT_SPEED
                elif right_button.collidepoint(event.pos):
                    player.rect.x += BUTTON_MOVEMENT_SPEED
                elif fire_button.collidepoint(event.pos):
                    player.shoot()

        all_sprites.update()
        hits = pygame.sprite.groupcollide(enemies, bullets, True, True)
        for hit in hits:
            score += 1
            explosion = Explosion(hit.rect.center)
            all_sprites.add(explosion)
            EXPLOSION_SOUND.play()
            enemy = Enemy()
            all_sprites.add(enemy)
            enemies.add(enemy)

        hits = pygame.sprite.spritecollide(player, enemies, True)
        if hits:
            game_over = True
        
        # When game over happens, save high score to the database
        if game_over:
            update_high_score(username, score)  # Update high score in the database

        all_sprites.draw(screen)
        font = pygame.font.Font(None, 36)
        text = font.render("Score: " + str(score), True, WHITE)
        screen.blit(text, (10, 10))

        draw_buttons()  # Draw buttons

    pygame.display.flip()
    clock.tick(FPS)

# Clean up Pygame and quit gracefully AFTER the loop finishes
pygame.quit()
